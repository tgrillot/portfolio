networks:
  default:
    name: webserver_internal
    external: true

services:
  db:
    container_name: portfolio-postgres
    image: postgres
    volumes:
      - ./data/db:/var/lib/postgresql/data
    env_file: ./backend/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  backend:
    container_name: portfolio-backend
    build: ./backend
    command: /bin/sh -c "python3.11 -m pip install -r requirements.txt && python manage.py runserver 0.0.0.0:18000"
    volumes:
      - ./backend:/code
    ports:
      - "18000:18000"
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy

  apiproxy:
    container_name: portfolio-apiproxy
    build: ./apiproxy
    command: /bin/sh -c "npm install && npm run start"
    volumes:
      - ./apiproxy:/code
    ports:
      - "38000:38000"
    depends_on:
      backend:
        condition: service_started

  frontend:
    container_name: portfolio-frontend
    build: ./frontend
    command: /bin/sh -c "npm install && npm run dev"
    volumes:
      - ./frontend:/code
    ports:
      - "28000:28000"
    depends_on:
      backend:
        condition: service_started
      apiproxy:
        condition: service_started